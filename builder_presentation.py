import streamlit as st

def show_builder_presentation():
    st.title("üèóÔ∏è –ü–∞—Ç—Ç–µ—Ä–Ω Builder (–°—Ç—Ä–æ–∏—Ç–µ–ª—å)")
    
    # –°–ª–∞–π–¥ 1
    st.header("1. –°—É—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
    st.markdown("""
    **Builder** –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    - –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã **–ø–æ—à–∞–≥–æ–≤–æ**
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
    - –ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    """)
    st.image("https://refactoring.guru/images/patterns/diagrams/builder/structure.png", width=500)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –°–ª–∞–π–¥ 2
    st.header("2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Python")
    st.code("""
    class Pizza:
        def __init__(self):
            self.size = None
            self.cheese = False
            self.pepperoni = False

    class PizzaBuilder:
        def __init__(self):
            self.pizza = Pizza()
        
        def set_size(self, size):
            self.pizza.size = size
            return self
            
        def add_cheese(self):
            self.pizza.cheese = True
            return self
    """, language='python')
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –°–ª–∞–π–¥ 3
    st.header("3. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    st.code("""
    builder = PizzaBuilder()
    pizza = (builder
             .set_size("Large")
             .add_cheese()
             .add_pepperoni()
             .build())
    
    print(pizza.size)  # Large
    print(pizza.cheese) # True
    """)
    st.info("üí° –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `self` –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤!")

if __name__ == "__main__":
    show_builder_presentation()
